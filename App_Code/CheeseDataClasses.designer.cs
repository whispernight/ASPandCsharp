#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cheese")]
public partial class CheeseDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCheese(Cheese instance);
  partial void UpdateCheese(Cheese instance);
  partial void DeleteCheese(Cheese instance);
  partial void InsertRegion(Region instance);
  partial void UpdateRegion(Region instance);
  partial void DeleteRegion(Region instance);
  partial void InsertConsistency(Consistency instance);
  partial void UpdateConsistency(Consistency instance);
  partial void DeleteConsistency(Consistency instance);
  partial void InsertMilk(Milk instance);
  partial void UpdateMilk(Milk instance);
  partial void DeleteMilk(Milk instance);
  #endregion
	
	public CheeseDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["cheeseConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public CheeseDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheeseDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheeseDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheeseDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Cheese> Cheeses
	{
		get
		{
			return this.GetTable<Cheese>();
		}
	}
	
	public System.Data.Linq.Table<Region> Regions
	{
		get
		{
			return this.GetTable<Region>();
		}
	}
	
	public System.Data.Linq.Table<Consistency> Consistencies
	{
		get
		{
			return this.GetTable<Consistency>();
		}
	}
	
	public System.Data.Linq.Table<Milk> Milks
	{
		get
		{
			return this.GetTable<Milk>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cheese")]
public partial class Cheese : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CheeseID;
	
	private string _CheeseName;
	
	private string _CheeseDescription;
	
	private int _ConsistancyID;
	
	private int _RegionID;
	
	private int _MilkID;
	
	private EntityRef<Region> _Region;
	
	private EntityRef<Consistency> _Consistency;
	
	private EntityRef<Milk> _Milk;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheeseIDChanging(int value);
    partial void OnCheeseIDChanged();
    partial void OnCheeseNameChanging(string value);
    partial void OnCheeseNameChanged();
    partial void OnCheeseDescriptionChanging(string value);
    partial void OnCheeseDescriptionChanged();
    partial void OnConsistancyIDChanging(int value);
    partial void OnConsistancyIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnMilkIDChanging(int value);
    partial void OnMilkIDChanged();
    #endregion
	
	public Cheese()
	{
		this._Region = default(EntityRef<Region>);
		this._Consistency = default(EntityRef<Consistency>);
		this._Milk = default(EntityRef<Milk>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheeseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CheeseID
	{
		get
		{
			return this._CheeseID;
		}
		set
		{
			if ((this._CheeseID != value))
			{
				this.OnCheeseIDChanging(value);
				this.SendPropertyChanging();
				this._CheeseID = value;
				this.SendPropertyChanged("CheeseID");
				this.OnCheeseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheeseName", DbType="VarChar(50)")]
	public string CheeseName
	{
		get
		{
			return this._CheeseName;
		}
		set
		{
			if ((this._CheeseName != value))
			{
				this.OnCheeseNameChanging(value);
				this.SendPropertyChanging();
				this._CheeseName = value;
				this.SendPropertyChanged("CheeseName");
				this.OnCheeseNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheeseDescription", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
	public string CheeseDescription
	{
		get
		{
			return this._CheeseDescription;
		}
		set
		{
			if ((this._CheeseDescription != value))
			{
				this.OnCheeseDescriptionChanging(value);
				this.SendPropertyChanging();
				this._CheeseDescription = value;
				this.SendPropertyChanged("CheeseDescription");
				this.OnCheeseDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsistancyID", DbType="Int NOT NULL")]
	public int ConsistancyID
	{
		get
		{
			return this._ConsistancyID;
		}
		set
		{
			if ((this._ConsistancyID != value))
			{
				if (this._Consistency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnConsistancyIDChanging(value);
				this.SendPropertyChanging();
				this._ConsistancyID = value;
				this.SendPropertyChanged("ConsistancyID");
				this.OnConsistancyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
	public int RegionID
	{
		get
		{
			return this._RegionID;
		}
		set
		{
			if ((this._RegionID != value))
			{
				if (this._Region.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRegionIDChanging(value);
				this.SendPropertyChanging();
				this._RegionID = value;
				this.SendPropertyChanged("RegionID");
				this.OnRegionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkID", DbType="Int NOT NULL")]
	public int MilkID
	{
		get
		{
			return this._MilkID;
		}
		set
		{
			if ((this._MilkID != value))
			{
				if (this._Milk.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMilkIDChanging(value);
				this.SendPropertyChanging();
				this._MilkID = value;
				this.SendPropertyChanged("MilkID");
				this.OnMilkIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Cheese", Storage="_Region", ThisKey="RegionID", OtherKey="RegionID", IsForeignKey=true)]
	public Region Region
	{
		get
		{
			return this._Region.Entity;
		}
		set
		{
			Region previousValue = this._Region.Entity;
			if (((previousValue != value) 
						|| (this._Region.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Region.Entity = null;
					previousValue.Cheeses.Remove(this);
				}
				this._Region.Entity = value;
				if ((value != null))
				{
					value.Cheeses.Add(this);
					this._RegionID = value.RegionID;
				}
				else
				{
					this._RegionID = default(int);
				}
				this.SendPropertyChanged("Region");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consistency_Cheese", Storage="_Consistency", ThisKey="ConsistancyID", OtherKey="ConsistencyID", IsForeignKey=true)]
	public Consistency Consistency
	{
		get
		{
			return this._Consistency.Entity;
		}
		set
		{
			Consistency previousValue = this._Consistency.Entity;
			if (((previousValue != value) 
						|| (this._Consistency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Consistency.Entity = null;
					previousValue.Cheeses.Remove(this);
				}
				this._Consistency.Entity = value;
				if ((value != null))
				{
					value.Cheeses.Add(this);
					this._ConsistancyID = value.ConsistencyID;
				}
				else
				{
					this._ConsistancyID = default(int);
				}
				this.SendPropertyChanged("Consistency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Milk_Cheese", Storage="_Milk", ThisKey="MilkID", OtherKey="MilkID", IsForeignKey=true)]
	public Milk Milk
	{
		get
		{
			return this._Milk.Entity;
		}
		set
		{
			Milk previousValue = this._Milk.Entity;
			if (((previousValue != value) 
						|| (this._Milk.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Milk.Entity = null;
					previousValue.Cheeses.Remove(this);
				}
				this._Milk.Entity = value;
				if ((value != null))
				{
					value.Cheeses.Add(this);
					this._MilkID = value.MilkID;
				}
				else
				{
					this._MilkID = default(int);
				}
				this.SendPropertyChanged("Milk");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RegionID;
	
	private string _RegionName;
	
	private EntitySet<Cheese> _Cheeses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    #endregion
	
	public Region()
	{
		this._Cheeses = new EntitySet<Cheese>(new Action<Cheese>(this.attach_Cheeses), new Action<Cheese>(this.detach_Cheeses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int RegionID
	{
		get
		{
			return this._RegionID;
		}
		set
		{
			if ((this._RegionID != value))
			{
				this.OnRegionIDChanging(value);
				this.SendPropertyChanging();
				this._RegionID = value;
				this.SendPropertyChanged("RegionID");
				this.OnRegionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(50)")]
	public string RegionName
	{
		get
		{
			return this._RegionName;
		}
		set
		{
			if ((this._RegionName != value))
			{
				this.OnRegionNameChanging(value);
				this.SendPropertyChanging();
				this._RegionName = value;
				this.SendPropertyChanged("RegionName");
				this.OnRegionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Cheese", Storage="_Cheeses", ThisKey="RegionID", OtherKey="RegionID")]
	public EntitySet<Cheese> Cheeses
	{
		get
		{
			return this._Cheeses;
		}
		set
		{
			this._Cheeses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Region = this;
	}
	
	private void detach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Region = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consistency")]
public partial class Consistency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ConsistencyID;
	
	private string _ConsistencyDesc;
	
	private EntitySet<Cheese> _Cheeses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsistencyIDChanging(int value);
    partial void OnConsistencyIDChanged();
    partial void OnConsistencyDescChanging(string value);
    partial void OnConsistencyDescChanged();
    #endregion
	
	public Consistency()
	{
		this._Cheeses = new EntitySet<Cheese>(new Action<Cheese>(this.attach_Cheeses), new Action<Cheese>(this.detach_Cheeses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsistencyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ConsistencyID
	{
		get
		{
			return this._ConsistencyID;
		}
		set
		{
			if ((this._ConsistencyID != value))
			{
				this.OnConsistencyIDChanging(value);
				this.SendPropertyChanging();
				this._ConsistencyID = value;
				this.SendPropertyChanged("ConsistencyID");
				this.OnConsistencyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsistencyDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ConsistencyDesc
	{
		get
		{
			return this._ConsistencyDesc;
		}
		set
		{
			if ((this._ConsistencyDesc != value))
			{
				this.OnConsistencyDescChanging(value);
				this.SendPropertyChanging();
				this._ConsistencyDesc = value;
				this.SendPropertyChanged("ConsistencyDesc");
				this.OnConsistencyDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consistency_Cheese", Storage="_Cheeses", ThisKey="ConsistencyID", OtherKey="ConsistancyID")]
	public EntitySet<Cheese> Cheeses
	{
		get
		{
			return this._Cheeses;
		}
		set
		{
			this._Cheeses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Consistency = this;
	}
	
	private void detach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Consistency = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Milk")]
public partial class Milk : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MilkID;
	
	private string _MilkType;
	
	private EntitySet<Cheese> _Cheeses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMilkIDChanging(int value);
    partial void OnMilkIDChanged();
    partial void OnMilkTypeChanging(string value);
    partial void OnMilkTypeChanged();
    #endregion
	
	public Milk()
	{
		this._Cheeses = new EntitySet<Cheese>(new Action<Cheese>(this.attach_Cheeses), new Action<Cheese>(this.detach_Cheeses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int MilkID
	{
		get
		{
			return this._MilkID;
		}
		set
		{
			if ((this._MilkID != value))
			{
				this.OnMilkIDChanging(value);
				this.SendPropertyChanging();
				this._MilkID = value;
				this.SendPropertyChanged("MilkID");
				this.OnMilkIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string MilkType
	{
		get
		{
			return this._MilkType;
		}
		set
		{
			if ((this._MilkType != value))
			{
				this.OnMilkTypeChanging(value);
				this.SendPropertyChanging();
				this._MilkType = value;
				this.SendPropertyChanged("MilkType");
				this.OnMilkTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Milk_Cheese", Storage="_Cheeses", ThisKey="MilkID", OtherKey="MilkID")]
	public EntitySet<Cheese> Cheeses
	{
		get
		{
			return this._Cheeses;
		}
		set
		{
			this._Cheeses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Milk = this;
	}
	
	private void detach_Cheeses(Cheese entity)
	{
		this.SendPropertyChanging();
		entity.Milk = null;
	}
}
#pragma warning restore 1591
